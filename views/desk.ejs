<%- include('./partials/head') %>

<style>
  .service-button {
    width: 300px;
    margin: 5px;
    padding: 10px;
    height: 300px;
    font-size: 2.5rem;
    border-radius: 5px;
    background-color: #f8f9fa;
    border: 1px solid #ccc;
    cursor: pointer;
    box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.1);
    position: relative; /* Aggiunto per il posizionamento del testo */
  }

  /* Hover effect solo se il bottone non è disabilitato */
  .service-button:hover:not(.disabled) {
    background-color: #e9ecef;
  }

  .service-button.red {
    background-color: red;
  }

  .service-button.disabled {
    cursor: not-allowed;
    box-shadow: none;
  }

  .booking-info {
    position: absolute; /* Posiziona il testo in basso al bottone */
    bottom: 10px; /* Margine inferiore */
    left: 50%; /* Centra orizzontalmente */
    transform: translateX(-50%); /* Centra orizzontalmente */
    font-size: 1.3rem; /* Dimensione del testo */
    color: #959191; /* Colore del testo */
  }
</style>

<div
  class="row d-flex align-items-center"
  id="desks-container"
  style="margin: 5px 0"
>
  <div class="col-3 text-center">
    <label for="">Scegli il desk</label>
    <select name="" class="form-select text-center" id="desk-select">
      <% desks.forEach(desk => { %>
      <option value="<%= desk.id %>"><%= desk.name %></option>
      <% }) %>
    </select>
  </div>
  <div class="col-9 text-end">
    <div class="dropdown">
      <button
        class="btn btn btn-light dropdown-toggle"
        type="button"
        data-bs-toggle="dropdown"
        aria-expanded="false"
      >
        <%= user_name %>
      </button>
      <ul class="dropdown-menu">
        <li><a class="dropdown-item" href="/admin/monitor">Monitor</a></li>
        <li><a class="dropdown-item" href="/logout">Logout</a></li>
      </ul>
    </div>
  </div>
</div>

<div class="mt-6" id="service-buttons-container">
  <!-- Qui verranno aggiunti dinamicamente i bottoni dei servizi -->
</div>

<div class="row mt-6" id="bookings-container"></div>

<div class="row mt-6" id="lastTicket-container"></div>

<script>
  let objGlobal = {
    services: [],
    services_count: 0,
    bookings: [],
    lastTicket: {},
  };

  const socket = io();

  document.addEventListener("DOMContentLoaded", () => {
    window.scrollTo(0, 0);
    getServices();

    // set desk in local storage
    const deskSelect = document.querySelector("select");
    if (!localStorage.getItem("desk")) localStorage.setItem("desk", 1);
    deskSelect.addEventListener("change", (e) => {
      localStorage.setItem("desk", e.target.value);
    });

    var selectedDeskId = localStorage.getItem("desk");

    if (selectedDeskId) {
      var selectElement = document.getElementById("desk-select");
      selectElement.value = selectedDeskId;
    }
  });

  const getServices = () => {
    fetch("/ticket/services")
      .then((response) => response.json())
      .then((services) => {
        objGlobal.services = services;
        objGlobal.services_count = services.length;
        getBookings();
      });
  };

  const getBookings = () => {
    fetch("/ticket/list")
      .then((response) => response.json())
      .then((data) => {
        objGlobal.bookings = data;
        renderServiceButtons();
      });
  };

  const renderServiceButtons = () => {
    const container = document.getElementById("service-buttons-container");
    container.classList.add(
      "d-flex",
      "flex-wrap",
      "justify-content-around",
      "align-items-center",
      "mt-5"
    );
    container.innerHTML = "";

    // Calcola dinamicamente la larghezza dei bottoni
    const services_count = objGlobal.services_count;

    objGlobal.services.forEach((service) => {
      const serviceContainer = document.createElement("div");

      serviceContainer.className = "";
      serviceContainer.id = `service${service.id}-container`;

      const serviceButton = document.createElement("button");
      serviceButton.className = "service-button";
      serviceButton.textContent = service.name;

      // Controlla il numero di bookings per questo servizio
      const serviceBookings = objGlobal.bookings.filter(
        (booking) => booking.service_id === service.id
      );

      // Aggiungi un elemento span per mostrare il numero di bookings
      const bookingsInfo = document.createElement("span");
      bookingsInfo.className = "booking-info"; // Aggiungi una classe per il CSS
      if (serviceBookings.length > 3) {
        bookingsInfo.textContent = "più di 3 ticket in coda";
      } else {
        bookingsInfo.textContent = `${serviceBookings.length} ticket in coda`;
      }

      if(serviceBookings.length < 1) {
        bookingsInfo.textContent = `No ticket`;
      }

      serviceButton.appendChild(bookingsInfo); // Aggiungi il numero di bookings all'interno del bottone

      serviceButton.addEventListener("click", () => {
        callTicket(service.id);

        // Loader per il bottone
        serviceButton.textContent = "Attendi...";
      });

      if (serviceBookings.length > 0) {
        serviceButton.style.cursor = "pointer";
      } else {
        serviceButton.classList.add("disabled");
        serviceButton.disabled = true;
      }

      serviceContainer.appendChild(serviceButton);
      container.appendChild(serviceContainer);
    });
  };

  const callTicket = async (serviceId) => {
    let deskId = localStorage.getItem("desk");
    let bookings = objGlobal.bookings.filter(
      (booking) => booking.service_id === serviceId
    );

    if (bookings.length === 0) {
      alert("Non ci sono ticket disponibili per questo servizio");
      return;
    }
    // recupera il ticket più vecchio, ovvero il primo della lista
    let ticket_code = bookings[0].code;
    socket.emit("call_ticket", ticket_code, deskId);

    setTimeout(() => {
      getServices();
    }, 500);
  };

  const renderBookings = () => {
    const container = document.getElementById("bookings-container");
    container.innerHTML = "";

    objGlobal.bookings.forEach((booking) => {
      // Qui puoi implementare la visualizzazione delle prenotazioni
    });

    renderServiceButtons(); // Aggiorna i bottoni dopo aver reso i bookings
  };

  socket.on("new_ticket", (ticket_code) => {
    getServices();
  });

  socket.on("delete_ticket", (ticket_code) => {
    getServices();
  });

  socket.on("my_ticket", (ticket_code) => {
    setTimeout(() => {
      getServices();
    }, 1000);
  });
</script>

<%- include('./partials/footer') %>

<%- include('./partials/head') %> <%- include('./partials/navbar', { desks:
desks, user_name: user_name, page: 'desk_all', settings: settings }) %>

<div class="mt-6" id="service-buttons-container"></div>

<div class="row mt-6" id="bookings-container"></div>

<div class="row px-4" style="margin-top: 50px" id="lastTicket-container"></div>

<script>
  let objGlobal = {
    services: [],
    services_count: 0,
    bookings: [],
    lastTicket: {},
  };

  const socket = io();

  document.addEventListener("DOMContentLoaded", () => {
    window.scrollTo(0, 0);
    getServices();

    // set desk in local storage
    const deskSelect = document.querySelector("select");
    if (!localStorage.getItem("desk")) {
      localStorage.setItem("desk", deskSelect.value);
    }
    deskSelect.addEventListener("change", (e) => {
      localStorage.setItem("desk", e.target.value);
    });

    var selectedDeskId = localStorage.getItem("desk");

    if (selectedDeskId) {
      var selectElement = document.getElementById("desk-select");
      // se esiste una option con il valore salvato in local storage, selezionala
      if (selectElement.querySelector(`option[value="${selectedDeskId}"]`))
        selectElement.value = selectedDeskId;
      // altrimenti seleziona la prima option
      else selectElement.value = selectElement.options[0].value;
    }
  });

  const getServices = () => {
    fetch("/ticket/services")
      .then((response) => response.json())
      .then((services) => {
        objGlobal.services = services;
        objGlobal.services_count = services.length;
        getBookings();
      });
  };

  const getBookings = () => {
    fetch("/ticket/list")
      .then((response) => response.json())
      .then((data) => {
        objGlobal.bookings = data;
        renderServiceButtons();
        getLastTicket();
      });
  };

  // const getLastTicket = () => {
  //   fetch("/ticket/last")
  //     .then((response) => response.json())
  //     .then((data) => {
  //       objGlobal.lastTicket = data;
  //       console.log(data);
  //     });
  // };

  const getLastTicket = () => {
    fetch("/ticket/last")
      .then((response) => response.text())
      .then((html) => {
        let lastTicketContainer = document.getElementById(
          "lastTicket-container"
        );
        lastTicketContainer.innerHTML = "";
        lastTicketContainer.innerHTML = html;
      });
  };

  const renderServiceButtons = () => {
    const container = document.getElementById("service-buttons-container");
    container.classList.add(
      "d-flex",
      "flex-wrap",
      "justify-content-around",
      "align-items-center",
      "mt-5"
    );
    container.innerHTML = "";

    // Calcola dinamicamente la larghezza dei bottoni
    const services_count = objGlobal.services_count;

    objGlobal.services.forEach((service) => {
      const serviceContainer = document.createElement("div");

      serviceContainer.className = "";
      serviceContainer.id = `service${service.id}-container`;

      const serviceButton = document.createElement("button");
      serviceButton.className = "service-button";
      serviceButton.textContent = service.name;

      // Controlla il numero di bookings per questo servizio
      const serviceBookings = objGlobal.bookings.filter(
        (booking) => booking.service_id === service.id
      );

      // Aggiungi un elemento span per mostrare il numero di bookings
      const bookingsInfo = document.createElement("span");
      bookingsInfo.className = "booking-info"; // Aggiungi una classe per il CSS
      if (serviceBookings.length > 3) {
        bookingsInfo.textContent = "più di 3 ticket in coda";
      } else {
        bookingsInfo.textContent = `${serviceBookings.length} ticket in coda`;
      }

      if (serviceBookings.length < 1) {
        bookingsInfo.textContent = `No ticket`;
      } else {
        bookingsInfo.style.color = "black";
      }

      serviceButton.appendChild(bookingsInfo); // Aggiungi il numero di bookings all'interno del bottone

      serviceButton.addEventListener("click", () => {
        callTicket(service.id);

        // Loader per il bottone
        serviceButton.textContent = "Attendi...";
      });

      if (serviceBookings.length > 0) {
        serviceButton.style.cursor = "pointer";
      } else {
        serviceButton.classList.add("disabled");
        serviceButton.disabled = true;
      }

      serviceContainer.appendChild(serviceButton);
      container.appendChild(serviceContainer);
    });
  };

  const callTicket = async (serviceId) => {
    let deskId = localStorage.getItem("desk");
    let bookings = objGlobal.bookings.filter(
      (booking) => booking.service_id === serviceId
    );

    if (bookings.length === 0) {
      alert("Non ci sono ticket disponibili per questo servizio");
      return;
    }
    // recupera il ticket più vecchio, ovvero il primo della lista
    let ticket_code = bookings[0].code;
    socket.emit("call_ticket", ticket_code, deskId);

    setTimeout(() => {
      getServices();
    }, 500);
  };

  const renderBookings = () => {
    const container = document.getElementById("bookings-container");
    container.innerHTML = "";

    objGlobal.bookings.forEach((booking) => {
      // Qui puoi implementare la visualizzazione delle prenotazioni
    });

    renderServiceButtons(); // Aggiorna i bottoni dopo aver reso i bookings
  };

  socket.on("new_ticket", (ticket_code) => {
    getServices();
  });

  socket.on("delete_ticket", (ticket_code) => {
    getServices();
  });

  socket.on("my_ticket", (ticket_code) => {
    setTimeout(() => {
      getServices();
    }, 1000);
  });
</script>

<%- include('./partials/footer', {settings: settings}) %>
